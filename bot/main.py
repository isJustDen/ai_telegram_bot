#main.py
import asyncio
import os

import aiohttp
import aiosqlite
from aiosqlite import connect
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

from telegram.ext import ApplicationBuilder, CommandHandler, ConversationHandler, MessageHandler, Updater, \
	CallbackContext, ContextTypes, filters, CallbackQueryHandler

from bot.ai_core import analyze_sentiment
from bot.database import init_db, save_result, DB_NAME, get_last_record

os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

#–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
async def post_init(application):
	await init_db()
	print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞")
	await show_data()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ SQLite —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–æ–Ω—Å–æ–ª–µ
async def show_data():
	async with aiosqlite.connect(DB_NAME) as db:
		cursor = await db.execute("SELECT * FROM emotions")
		rows = await cursor.fetchall()
		print("\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã emotions:")
		for row in rows:
			print(row)
		print()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context:ContextTypes.DEFAULT_TYPE) -> None:
	await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ ü§ñ")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def analyze(update:Update, context:ContextTypes.DEFAULT_TYPE) -> None:
	user_text = update.message.text
	context.user_data['last_message'] = user_text
	responce = await analyze_sentiment(user_text)

	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	success = await save_result(
		user_id=update.effective_user.id,
		message=user_text,
		sentiment=responce,
		lang= 'ru' if 'RU' in responce else 'en'
	)
	if not success:
		print('‚ö†Ô∏è–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
	await update.message.reply_text(responce)

# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–º–æ—Ü–∏—é"
async def ask_emotion_check(update:Update, context:ContextTypes.DEFAULT_TYPE) -> None:
	keyboard = [
		[InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–º–æ—Ü–∏—é', callback_data='analyze_emotion')],
	]
	reply_markup = InlineKeyboardMarkup(keyboard)
	await update.message.reply_text(text = f'–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {update.message.text}', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–∫–∏
async def button_handler(update:Update, context:ContextTypes.DEFAULT_TYPE) -> None:
	query = update.callback_query
	await query.answer()

	last_record = await get_last_record(query.from_user.id)
	if last_record:
		await query.edit_message_text(text = f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: \n{last_record[3]}')
	else:
		await query.edit_message_text(text = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –≤ telegram
async def show_data_command(update:Update, context:ContextTypes.DEFAULT_TYPE) -> None:
	await show_data()
	await update.message.reply_text('–î–∞–Ω–Ω—ã–µ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞')



#—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
	try:
		#asyncio.run(init_db())
		app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()
		#app = ApplicationBuilder().token(TOKEN).build()

		# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
		app.add_handler(CommandHandler('start', start))
		app.add_handler(CommandHandler('check', ask_emotion_check))
		app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze))
		app.add_handler(CallbackQueryHandler(button_handler))
		app.add_handler(CommandHandler('show_data', show_data_command))
		app.add_handler(CommandHandler('analyze', analyze))

		print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
		app.run_polling()
	except Exception as e:
		print(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")

